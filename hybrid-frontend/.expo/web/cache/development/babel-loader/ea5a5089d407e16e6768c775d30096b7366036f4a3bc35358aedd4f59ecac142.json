{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeLinking from \"./ExpoLinking\";\nimport { parse } from \"./createURL\";\nimport { validateURL } from \"./validateURL\";\nexport function addEventListener(type, handler) {\n  return NativeLinking.addEventListener(type, handler);\n}\nexport function parseInitialURLAsync() {\n  var initialUrl;\n  return _regeneratorRuntime.async(function parseInitialURLAsync$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return _regeneratorRuntime.awrap(NativeLinking.getInitialURL());\n      case 2:\n        initialUrl = _context.sent;\n        if (initialUrl) {\n          _context.next = 5;\n          break;\n        }\n        return _context.abrupt(\"return\", {\n          scheme: null,\n          hostname: null,\n          path: null,\n          queryParams: null\n        });\n      case 5:\n        return _context.abrupt(\"return\", parse(initialUrl));\n      case 6:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function sendIntent(action, extras) {\n  return _regeneratorRuntime.async(function sendIntent$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        if (!(Platform.OS === 'android')) {\n          _context2.next = 4;\n          break;\n        }\n        _context2.next = 3;\n        return _regeneratorRuntime.awrap(NativeLinking.sendIntent(action, extras));\n      case 3:\n        return _context2.abrupt(\"return\", _context2.sent);\n      case 4:\n        throw new UnavailabilityError('Linking', 'sendIntent');\n      case 5:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function openSettings() {\n  return _regeneratorRuntime.async(function openSettings$(_context3) {\n    while (1) switch (_context3.prev = _context3.next) {\n      case 0:\n        if (!(Platform.OS === 'web')) {\n          _context3.next = 2;\n          break;\n        }\n        throw new UnavailabilityError('Linking', 'openSettings');\n      case 2:\n        if (!NativeLinking.openSettings) {\n          _context3.next = 6;\n          break;\n        }\n        _context3.next = 5;\n        return _regeneratorRuntime.awrap(NativeLinking.openSettings());\n      case 5:\n        return _context3.abrupt(\"return\", _context3.sent);\n      case 6:\n        _context3.next = 8;\n        return _regeneratorRuntime.awrap(openURL('app-settings:'));\n      case 8:\n      case \"end\":\n        return _context3.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function getInitialURL() {\n  var _await$NativeLinking$;\n  return _regeneratorRuntime.async(function getInitialURL$(_context4) {\n    while (1) switch (_context4.prev = _context4.next) {\n      case 0:\n        _context4.next = 2;\n        return _regeneratorRuntime.awrap(NativeLinking.getInitialURL());\n      case 2:\n        _context4.t0 = _await$NativeLinking$ = _context4.sent;\n        if (!(_context4.t0 != null)) {\n          _context4.next = 7;\n          break;\n        }\n        _context4.t1 = _await$NativeLinking$;\n        _context4.next = 8;\n        break;\n      case 7:\n        _context4.t1 = null;\n      case 8:\n        return _context4.abrupt(\"return\", _context4.t1);\n      case 9:\n      case \"end\":\n        return _context4.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function openURL(url) {\n  return _regeneratorRuntime.async(function openURL$(_context5) {\n    while (1) switch (_context5.prev = _context5.next) {\n      case 0:\n        validateURL(url);\n        _context5.next = 3;\n        return _regeneratorRuntime.awrap(NativeLinking.openURL(url));\n      case 3:\n        return _context5.abrupt(\"return\", _context5.sent);\n      case 4:\n      case \"end\":\n        return _context5.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function canOpenURL(url) {\n  return _regeneratorRuntime.async(function canOpenURL$(_context6) {\n    while (1) switch (_context6.prev = _context6.next) {\n      case 0:\n        validateURL(url);\n        _context6.next = 3;\n        return _regeneratorRuntime.awrap(NativeLinking.canOpenURL(url));\n      case 3:\n        return _context6.abrupt(\"return\", _context6.sent);\n      case 4:\n      case \"end\":\n        return _context6.stop();\n    }\n  }, null, null, null, Promise);\n}\nexport function useURL() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    url = _useState2[0],\n    setLink = _useState2[1];\n  function onChange(event) {\n    setLink(event.url);\n  }\n  useEffect(function () {\n    getInitialURL().then(function (url) {\n      return setLink(url);\n    });\n    var subscription = addEventListener('url', onChange);\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n  return url;\n}\nexport * from \"./Linking.types\";\nexport * from \"./Schemes\";\nexport { parse, createURL } from \"./createURL\";","map":{"version":3,"names":["UnavailabilityError","useEffect","useState","Platform","NativeLinking","parse","validateURL","addEventListener","type","handler","parseInitialURLAsync","initialUrl","_regeneratorRuntime","async","parseInitialURLAsync$","_context","prev","next","awrap","getInitialURL","sent","abrupt","scheme","hostname","path","queryParams","stop","Promise","sendIntent","action","extras","sendIntent$","_context2","OS","openSettings","openSettings$","_context3","openURL","_await$NativeLinking$","getInitialURL$","_context4","t0","t1","url","openURL$","_context5","canOpenURL","canOpenURL$","_context6","useURL","_useState","_useState2","_slicedToArray","setLink","onChange","event","then","subscription","remove","createURL"],"sources":["/Users/diegollull/Desktop/Uandes/8vo_semestre/APPS/ proyecto-del-curso-llull-zarate /hybrid-frontend/node_modules/expo-linking/src/Linking.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport { EmitterSubscription, Platform } from 'react-native';\n\nimport NativeLinking from './ExpoLinking';\nimport { ParsedURL, SendIntentExtras, URLListener } from './Linking.types';\nimport { parse } from './createURL';\nimport { validateURL } from './validateURL';\n\n// @needsAudit\n/**\n * Add a handler to `Linking` changes by listening to the `url` event type and providing the handler.\n * It is recommended to use the [`useURL()`](#useurl) hook instead.\n * @param type The only valid type is `'url'`.\n * @param handler An [`URLListener`](#urllistener) function that takes an `event` object of the type\n * [`EventType`](#eventype).\n * @return An EmitterSubscription that has the remove method from EventSubscription\n * @see [React Native Docs Linking page](https://reactnative.dev/docs/linking#addeventlistener).\n */\nexport function addEventListener(type: 'url', handler: URLListener): EmitterSubscription {\n  return NativeLinking.addEventListener(type, handler);\n}\n\n// @needsAudit\n/**\n * Helper method which wraps React Native's `Linking.getInitialURL()` in `Linking.parse()`.\n * Parses the deep link information out of the URL used to open the experience initially.\n * If no link opened the app, all the fields will be `null`.\n * > On the web it parses the current window URL.\n * @return A promise that resolves with `ParsedURL` object.\n */\nexport async function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await NativeLinking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      scheme: null,\n      hostname: null,\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\n// @needsAudit\n/**\n * Launch an Android intent with extras.\n * > Use [IntentLauncher](./intent-launcher) instead, `sendIntent` is only included in\n * > `Linking` for API compatibility with React Native's Linking API.\n * @platform android\n */\nexport async function sendIntent(action: string, extras?: SendIntentExtras[]): Promise<void> {\n  if (Platform.OS === 'android') {\n    return await NativeLinking.sendIntent(action, extras);\n  }\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}\n\n// @needsAudit\n/**\n * Open the operating system settings app and displays the appâ€™s custom settings, if it has any.\n */\nexport async function openSettings(): Promise<void> {\n  if (Platform.OS === 'web') {\n    throw new UnavailabilityError('Linking', 'openSettings');\n  }\n  if (NativeLinking.openSettings) {\n    return await NativeLinking.openSettings();\n  }\n  await openURL('app-settings:');\n}\n\n// @needsAudit\n/**\n * Get the URL that was used to launch the app if it was launched by a link.\n * @return The URL string that launched your app, or `null`.\n */\nexport async function getInitialURL(): Promise<string | null> {\n  return (await NativeLinking.getInitialURL()) ?? null;\n}\n\n// @needsAudit\n/**\n * Attempt to open the given URL with an installed app. See the [Linking guide](/guides/linking)\n * for more information.\n * @param url A URL for the operating system to open, eg: `tel:5555555`, `exp://`.\n * @return A `Promise` that is fulfilled with `true` if the link is opened operating system\n * automatically or the user confirms the prompt to open the link. The `Promise` rejects if there\n * are no applications registered for the URL or the user cancels the dialog.\n */\nexport async function openURL(url: string): Promise<true> {\n  validateURL(url);\n  return await NativeLinking.openURL(url);\n}\n\n// @needsAudit\n/**\n * Determine whether or not an installed app can handle a given URL.\n * On web this always returns `true` because there is no API for detecting what URLs can be opened.\n * @param url The URL that you want to test can be opened.\n * @return A `Promise` object that is fulfilled with `true` if the URL can be handled, otherwise it\n * `false` if not.\n *\n * The `Promise` will reject on Android if it was impossible to check if the URL can be opened, and\n * on iOS if you didn't [add the specific scheme in the `LSApplicationQueriesSchemes` key inside **Info.plist**](/guides/linking#linking-from-your-app).\n */\nexport async function canOpenURL(url: string): Promise<boolean> {\n  validateURL(url);\n  return await NativeLinking.canOpenURL(url);\n}\n\n// @needsAudit\n/**\n * Returns the initial URL followed by any subsequent changes to the URL.\n * @return Returns the initial URL or `null`.\n */\nexport function useURL(): string | null {\n  const [url, setLink] = useState<string | null>(null);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    getInitialURL().then((url) => setLink(url));\n    const subscription = addEventListener('url', onChange);\n    return () => subscription.remove();\n  }, []);\n\n  return url;\n}\n\nexport * from './Linking.types';\nexport * from './Schemes';\nexport { parse, createURL } from './createURL';\n"],"mappings":";;AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AACvD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,QAAA;AAG5C,OAAOC,aAAa;AAEpB,SAASC,KAAK;AACd,SAASC,WAAW;AAYpB,OAAM,SAAUC,gBAAgBA,CAACC,IAAW,EAAEC,OAAoB;EAChE,OAAOL,aAAa,CAACG,gBAAgB,CAACC,IAAI,EAAEC,OAAO,CAAC;AACtD;AAUA,OAAO,SAAeC,oBAAoBA,CAAA;EAAA,IAAAC,UAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,sBAAAC,QAAA;IAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;MAAA;QAAAF,QAAA,CAAAE,IAAA;QAAA,OAAAL,mBAAA,CAAAM,KAAA,CACfd,aAAa,CAACe,aAAa,EAAE;MAAA;QAAhDR,UAAU,GAAAI,QAAA,CAAAK,IAAA;QAAA,IACXT,UAAU;UAAAI,QAAA,CAAAE,IAAA;UAAA;QAAA;QAAA,OAAAF,QAAA,CAAAM,MAAA,WACN;UACLC,MAAM,EAAE,IAAI;UACZC,QAAQ,EAAE,IAAI;UACdC,IAAI,EAAE,IAAI;UACVC,WAAW,EAAE;SACd;MAAA;QAAA,OAAAV,QAAA,CAAAM,MAAA,WAGIhB,KAAK,CAACM,UAAU,CAAC;MAAA;MAAA;QAAA,OAAAI,QAAA,CAAAW,IAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AAU1B,OAAO,SAAeC,UAAUA,CAACC,MAAc,EAAEC,MAA2B;EAAA,OAAAlB,mBAAA,CAAAC,KAAA,UAAAkB,YAAAC,SAAA;IAAA,kBAAAA,SAAA,CAAAhB,IAAA,GAAAgB,SAAA,CAAAf,IAAA;MAAA;QAAA,MACtEd,QAAQ,CAAC8B,EAAE,KAAK,SAAS;UAAAD,SAAA,CAAAf,IAAA;UAAA;QAAA;QAAAe,SAAA,CAAAf,IAAA;QAAA,OAAAL,mBAAA,CAAAM,KAAA,CACdd,aAAa,CAACwB,UAAU,CAACC,MAAM,EAAEC,MAAM,CAAC;MAAA;QAAA,OAAAE,SAAA,CAAAX,MAAA,WAAAW,SAAA,CAAAZ,IAAA;MAAA;QAAA,MAEjD,IAAIpB,mBAAmB,CAAC,SAAS,EAAE,YAAY,CAAC;MAAA;MAAA;QAAA,OAAAgC,SAAA,CAAAN,IAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AAOxD,OAAO,SAAeO,YAAYA,CAAA;EAAA,OAAAtB,mBAAA,CAAAC,KAAA,UAAAsB,cAAAC,SAAA;IAAA,kBAAAA,SAAA,CAAApB,IAAA,GAAAoB,SAAA,CAAAnB,IAAA;MAAA;QAAA,MAC5Bd,QAAQ,CAAC8B,EAAE,KAAK,KAAK;UAAAG,SAAA,CAAAnB,IAAA;UAAA;QAAA;QAAA,MACjB,IAAIjB,mBAAmB,CAAC,SAAS,EAAE,cAAc,CAAC;MAAA;QAAA,KAEtDI,aAAa,CAAC8B,YAAY;UAAAE,SAAA,CAAAnB,IAAA;UAAA;QAAA;QAAAmB,SAAA,CAAAnB,IAAA;QAAA,OAAAL,mBAAA,CAAAM,KAAA,CACfd,aAAa,CAAC8B,YAAY,EAAE;MAAA;QAAA,OAAAE,SAAA,CAAAf,MAAA,WAAAe,SAAA,CAAAhB,IAAA;MAAA;QAAAgB,SAAA,CAAAnB,IAAA;QAAA,OAAAL,mBAAA,CAAAM,KAAA,CAErCmB,OAAO,CAAC,eAAe,CAAC;MAAA;MAAA;QAAA,OAAAD,SAAA,CAAAV,IAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AAQhC,OAAO,SAAeR,aAAaA,CAAA;EAAA,IAAAmB,qBAAA;EAAA,OAAA1B,mBAAA,CAAAC,KAAA,UAAA0B,eAAAC,SAAA;IAAA,kBAAAA,SAAA,CAAAxB,IAAA,GAAAwB,SAAA,CAAAvB,IAAA;MAAA;QAAAuB,SAAA,CAAAvB,IAAA;QAAA,OAAAL,mBAAA,CAAAM,KAAA,CACnBd,aAAa,CAACe,aAAa,EAAE;MAAA;QAAAqB,SAAA,CAAAC,EAAA,GAAAH,qBAAA,GAAAE,SAAA,CAAApB,IAAA;QAAA,MAAAoB,SAAA,CAAAC,EAAA;UAAAD,SAAA,CAAAvB,IAAA;UAAA;QAAA;QAAAuB,SAAA,CAAAE,EAAA,GAAAJ,qBAAA;QAAAE,SAAA,CAAAvB,IAAA;QAAA;MAAA;QAAAuB,SAAA,CAAAE,EAAA,GAAK,IAAI;MAAA;QAAA,OAAAF,SAAA,CAAAnB,MAAA,WAAAmB,SAAA,CAAAE,EAAA;MAAA;MAAA;QAAA,OAAAF,SAAA,CAAAd,IAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AAYtD,OAAO,SAAeU,OAAOA,CAACM,GAAW;EAAA,OAAA/B,mBAAA,CAAAC,KAAA,UAAA+B,SAAAC,SAAA;IAAA,kBAAAA,SAAA,CAAA7B,IAAA,GAAA6B,SAAA,CAAA5B,IAAA;MAAA;QACvCX,WAAW,CAACqC,GAAG,CAAC;QAACE,SAAA,CAAA5B,IAAA;QAAA,OAAAL,mBAAA,CAAAM,KAAA,CACJd,aAAa,CAACiC,OAAO,CAACM,GAAG,CAAC;MAAA;QAAA,OAAAE,SAAA,CAAAxB,MAAA,WAAAwB,SAAA,CAAAzB,IAAA;MAAA;MAAA;QAAA,OAAAyB,SAAA,CAAAnB,IAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AAczC,OAAO,SAAemB,UAAUA,CAACH,GAAW;EAAA,OAAA/B,mBAAA,CAAAC,KAAA,UAAAkC,YAAAC,SAAA;IAAA,kBAAAA,SAAA,CAAAhC,IAAA,GAAAgC,SAAA,CAAA/B,IAAA;MAAA;QAC1CX,WAAW,CAACqC,GAAG,CAAC;QAACK,SAAA,CAAA/B,IAAA;QAAA,OAAAL,mBAAA,CAAAM,KAAA,CACJd,aAAa,CAAC0C,UAAU,CAACH,GAAG,CAAC;MAAA;QAAA,OAAAK,SAAA,CAAA3B,MAAA,WAAA2B,SAAA,CAAA5B,IAAA;MAAA;MAAA;QAAA,OAAA4B,SAAA,CAAAtB,IAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AAQ5C,OAAM,SAAUsB,MAAMA,CAAA;EACpB,IAAAC,SAAA,GAAuBhD,QAAQ,CAAgB,IAAI,CAAC;IAAAiD,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA7CP,GAAG,GAAAQ,UAAA;IAAEE,OAAO,GAAAF,UAAA;EAEnB,SAASG,QAAQA,CAACC,KAAsB;IACtCF,OAAO,CAACE,KAAK,CAACZ,GAAG,CAAC;EACpB;EAEA1C,SAAS,CAAC,YAAK;IACbkB,aAAa,EAAE,CAACqC,IAAI,CAAC,UAACb,GAAG;MAAA,OAAKU,OAAO,CAACV,GAAG,CAAC;IAAA,EAAC;IAC3C,IAAMc,YAAY,GAAGlD,gBAAgB,CAAC,KAAK,EAAE+C,QAAQ,CAAC;IACtD,OAAO;MAAA,OAAMG,YAAY,CAACC,MAAM,EAAE;IAAA;EACpC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOf,GAAG;AACZ;AAEA;AACA;AACA,SAAStC,KAAK,EAAEsD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}