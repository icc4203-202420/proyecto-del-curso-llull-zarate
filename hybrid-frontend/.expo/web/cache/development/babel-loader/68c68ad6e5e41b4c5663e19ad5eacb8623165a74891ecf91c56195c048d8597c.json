{"ast":null,"code":"\"use strict\";\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction symbolicateStackTrace(stack) {\n  var baseUrl, response;\n  return _regeneratorRuntime.async(function symbolicateStackTrace$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        baseUrl = typeof window === 'undefined' ? process.env.EXPO_DEV_SERVER_ORIGIN : window.location.protocol + '//' + window.location.host;\n        _context.next = 3;\n        return _regeneratorRuntime.awrap(fetch(baseUrl + '/symbolicate', {\n          method: 'POST',\n          body: JSON.stringify({\n            stack: stack\n          })\n        }));\n      case 3:\n        response = _context.sent;\n        _context.next = 6;\n        return _regeneratorRuntime.awrap(response.json());\n      case 6:\n        return _context.abrupt(\"return\", _context.sent);\n      case 7:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, null, Promise);\n}\nexports.default = symbolicateStackTrace;","map":{"version":3,"names":["symbolicateStackTrace","stack","baseUrl","response","_regeneratorRuntime","async","symbolicateStackTrace$","_context","prev","next","window","process","env","EXPO_DEV_SERVER_ORIGIN","location","protocol","host","awrap","fetch","method","body","JSON","stringify","sent","json","abrupt","stop","Promise","exports","default"],"sources":["/Users/diegollull/Desktop/Uandes/8vo_semestre/APPS/ proyecto-del-curso-llull-zarate /hybrid-frontend/node_modules/@expo/metro-runtime/src/error-overlay/modules/symbolicateStackTrace/index.ts"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { StackFrame } from 'stacktrace-parser';\n\nexport type CodeFrame = {\n  content: string;\n  location?: {\n    row: number;\n    column: number;\n    [key: string]: any;\n  };\n  fileName: string;\n};\n\nexport type SymbolicatedStackTrace = {\n  stack: StackFrame[];\n  codeFrame?: CodeFrame;\n};\n\nasync function symbolicateStackTrace(stack: StackFrame[]): Promise<SymbolicatedStackTrace> {\n  const baseUrl =\n    typeof window === 'undefined'\n      ? process.env.EXPO_DEV_SERVER_ORIGIN\n      : window.location.protocol + '//' + window.location.host;\n\n  const response = await fetch(baseUrl + '/symbolicate', {\n    method: 'POST',\n    body: JSON.stringify({ stack }),\n  });\n  return await response.json();\n}\n\nexport default symbolicateStackTrace;\n"],"mappings":";;;;;AAyBA,SAAeA,qBAAqBA,CAACC,KAAmB;EAAA,IAAAC,OAAA,EAAAC,QAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,uBAAAC,QAAA;IAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;MAAA;QAChDP,OAAO,GACX,OAAOQ,MAAM,KAAK,WAAW,GACzBC,OAAO,CAACC,GAAG,CAACC,sBAAsB,GAClCH,MAAM,CAACI,QAAQ,CAACC,QAAQ,GAAG,IAAI,GAAGL,MAAM,CAACI,QAAQ,CAACE,IAAI;QAAAT,QAAA,CAAAE,IAAA;QAAA,OAAAL,mBAAA,CAAAa,KAAA,CAErCC,KAAK,CAAChB,OAAO,GAAG,cAAc,EAAE;UACrDiB,MAAM,EAAE,MAAM;UACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAErB,KAAK,EAALA;UAAK,CAAE;SAC/B,CAAC;MAAA;QAHIE,QAAQ,GAAAI,QAAA,CAAAgB,IAAA;QAAAhB,QAAA,CAAAE,IAAA;QAAA,OAAAL,mBAAA,CAAAa,KAAA,CAIDd,QAAQ,CAACqB,IAAI,EAAE;MAAA;QAAA,OAAAjB,QAAA,CAAAkB,MAAA,WAAAlB,QAAA,CAAAgB,IAAA;MAAA;MAAA;QAAA,OAAAhB,QAAA,CAAAmB,IAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AAG9BC,OAAA,CAAAC,OAAA,GAAe7B,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}