{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { adjustPathname } from \"../fork/extractPathFromURL\";\nimport getPathFromState from \"../fork/getPathFromState\";\nimport getStateFromPath from \"../fork/getStateFromPath\";\nexport function getInitialURL() {\n  if (process.env.NODE_ENV === 'test') {\n    var _Linking$getInitialUR;\n    return (_Linking$getInitialUR = Linking.getInitialURL()) != null ? _Linking$getInitialUR : getRootURL();\n  }\n  if (Platform.OS === 'web') {\n    var _window$location;\n    if (typeof window === 'undefined') {\n      return '';\n    } else if (typeof ((_window$location = window.location) == null ? void 0 : _window$location.href) === 'string') {\n      return window.location.href;\n    }\n  }\n  return Promise.race([function _callee() {\n    var url, parsed;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Linking.getInitialURL());\n        case 2:\n          url = _context.sent;\n          if (!(url && Constants.executionEnvironment === ExecutionEnvironment.StoreClient)) {\n            _context.next = 7;\n            break;\n          }\n          parsed = Linking.parse(url);\n          if (!(parsed.path === null || ['', '/'].includes(adjustPathname({\n            hostname: parsed.hostname,\n            pathname: parsed.path\n          })))) {\n            _context.next = 7;\n            break;\n          }\n          return _context.abrupt(\"return\", getRootURL());\n        case 7:\n          return _context.abrupt(\"return\", url != null ? url : getRootURL());\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }, null, null, null, Promise);\n  }(), new Promise(function (resolve) {\n    return setTimeout(function () {\n      return resolve(getRootURL());\n    }, 150);\n  })]);\n}\nvar _rootURL;\nexport function getRootURL() {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL('/');\n  }\n  return _rootURL;\n}\nexport function addEventListener(listener) {\n  var callback = undefined;\n  if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n    callback = function callback(_ref) {\n      var url = _ref.url;\n      var parsed = Linking.parse(url);\n      if (parsed.path === null || ['', '/'].includes(adjustPathname({\n        hostname: parsed.hostname,\n        pathname: parsed.path\n      }))) {\n        listener(getRootURL());\n      } else {\n        listener(url);\n      }\n    };\n  } else {\n    callback = function callback(_ref2) {\n      var url = _ref2.url;\n      return listener(url);\n    };\n  }\n  var subscription = Linking.addEventListener('url', callback);\n  return function () {\n    subscription == null ? void 0 : subscription.remove == null ? void 0 : subscription.remove();\n  };\n}\nexport { getStateFromPath, getPathFromState };","map":{"version":3,"names":["Constants","ExecutionEnvironment","Linking","Platform","adjustPathname","getPathFromState","getStateFromPath","getInitialURL","process","env","NODE_ENV","_Linking$getInitialUR","getRootURL","OS","_window$location","window","location","href","Promise","race","_callee","url","parsed","_regeneratorRuntime","async","_callee$","_context","prev","next","awrap","sent","executionEnvironment","StoreClient","parse","path","includes","hostname","pathname","abrupt","stop","resolve","setTimeout","_rootURL","undefined","createURL","addEventListener","listener","callback","_ref","_ref2","subscription","remove"],"sources":["/Users/diegollull/Desktop/Uandes/8vo_semestre/APPS/ proyecto-del-curso-llull-zarate /hybrid-frontend/node_modules/expo-router/src/link/linking.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'react-native';\n\nimport { adjustPathname } from '../fork/extractPathFromURL';\nimport getPathFromState from '../fork/getPathFromState';\nimport getStateFromPath from '../fork/getStateFromPath';\n\n// A custom getInitialURL is used on native to ensure the app always starts at\n// the root path if it's launched from something other than a deep link.\n// This helps keep the native functionality working like the web functionality.\n// For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n// then `/index` would be used on web and `/settings` would be used on native.\nexport function getInitialURL(): Promise<string | null> | string {\n  if (process.env.NODE_ENV === 'test') {\n    return Linking.getInitialURL() ?? getRootURL();\n  }\n\n  if (Platform.OS === 'web') {\n    if (typeof window === 'undefined') {\n      return '';\n    } else if (typeof window.location?.href === 'string') {\n      return window.location.href;\n    }\n  }\n  return Promise.race<string>([\n    (async () => {\n      const url = await Linking.getInitialURL();\n\n      // NOTE(EvanBacon): This could probably be wrapped with the development boundary\n      // since Expo Go is mostly just used in development.\n\n      // Expo Go is weird and requires the root path to be `/--/`\n      if (url && Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n        const parsed = Linking.parse(url);\n        // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n        // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n        if (\n          parsed.path === null ||\n          ['', '/'].includes(\n            adjustPathname({\n              hostname: parsed.hostname,\n              pathname: parsed.path,\n            })\n          )\n        ) {\n          return getRootURL();\n        }\n      }\n      // The path will be nullish in bare apps when the app is launched from the home screen.\n      // TODO(EvanBacon): define some policy around notifications.\n      return url ?? getRootURL();\n    })(),\n    new Promise<string>((resolve) =>\n      // Timeout in 150ms if `getInitialState` doesn't resolve\n      // Workaround for https://github.com/facebook/react-native/issues/25675\n      setTimeout(() => resolve(getRootURL()), 150)\n    ),\n  ]);\n}\n\nlet _rootURL: string | undefined;\n\nexport function getRootURL(): string {\n  if (_rootURL === undefined) {\n    _rootURL = Linking.createURL('/');\n  }\n  return _rootURL;\n}\n\nexport function addEventListener(listener: (url: string) => void) {\n  let callback: (({ url }: { url: string }) => void) | undefined = undefined;\n\n  if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n    // This extra work is only done in the Expo Go app.\n    callback = ({ url }: { url: string }) => {\n      const parsed = Linking.parse(url);\n\n      // If the URL is defined (default in Expo Go dev apps) and the URL has no path:\n      // `exp://192.168.87.39:19000/` then use the default `exp://192.168.87.39:19000/--/`\n      if (\n        parsed.path === null ||\n        ['', '/'].includes(adjustPathname({ hostname: parsed.hostname, pathname: parsed.path }))\n      ) {\n        listener(getRootURL());\n      } else {\n        listener(url);\n      }\n    };\n  } else {\n    callback = ({ url }: { url: string }) => listener(url);\n  }\n  const subscription = Linking.addEventListener('url', callback);\n\n  return () => {\n    // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n    subscription?.remove?.();\n  };\n}\n\nexport { getStateFromPath, getPathFromState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}