{"ast":null,"code":"\"use strict\";\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildAsyncRequire = void 0;\nvar loadBundle_1 = require(\"./loadBundle\");\nfunction buildAsyncRequire() {\n  var cache = new Map();\n  return function universal_loadBundleAsync(path) {\n    var promise;\n    return _regeneratorRuntime.async(function universal_loadBundleAsync$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!cache.has(path)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", cache.get(path));\n        case 2:\n          promise = (0, loadBundle_1.loadBundleAsync)(path).catch(function (error) {\n            cache.delete(path);\n            throw error;\n          });\n          cache.set(path, promise);\n          return _context.abrupt(\"return\", promise);\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }, null, null, null, Promise);\n  };\n}\nexports.buildAsyncRequire = buildAsyncRequire;","map":{"version":3,"names":["loadBundle_1","require","buildAsyncRequire","cache","Map","universal_loadBundleAsync","path","promise","_regeneratorRuntime","async","universal_loadBundleAsync$","_context","prev","next","has","abrupt","get","loadBundleAsync","catch","error","delete","set","stop","Promise","exports"],"sources":["/Users/diegollull/Desktop/Uandes/8vo_semestre/APPS/ proyecto-del-curso-llull-zarate /hybrid-frontend/node_modules/@expo/metro-runtime/src/async-require/buildAsyncRequire.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { loadBundleAsync } from './loadBundle';\n\n/**\n * Must satisfy the requirements of the Metro bundler.\n * https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0605-lazy-bundling.md#__loadbundleasync-in-metro\n */\ntype AsyncRequire = (path: string) => Promise<void>;\n\n/** Create an `loadBundleAsync` function in the expected shape for Metro bundler. */\nexport function buildAsyncRequire(): AsyncRequire {\n  const cache = new Map<string, Promise<void>>();\n\n  return async function universal_loadBundleAsync(path: string): Promise<void> {\n    if (cache.has(path)) {\n      return cache.get(path)!;\n    }\n\n    const promise = loadBundleAsync(path).catch((error) => {\n      cache.delete(path);\n      throw error;\n    });\n\n    cache.set(path, promise);\n\n    return promise;\n  };\n}\n"],"mappings":";;;;;;AAOA,IAAAA,YAAA,GAAAC,OAAA;AASA,SAAgBC,iBAAiBA,CAAA;EAC/B,IAAMC,KAAK,GAAG,IAAIC,GAAG,EAAyB;EAE9C,OAAO,SAAeC,yBAAyBA,CAACC,IAAY;IAAA,IAAAC,OAAA;IAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,2BAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA,KACtDV,KAAK,CAACW,GAAG,CAACR,IAAI,CAAC;YAAAK,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAI,MAAA,WACVZ,KAAK,CAACa,GAAG,CAACV,IAAI,CAAE;QAAA;UAGnBC,OAAO,GAAG,IAAAP,YAAA,CAAAiB,eAAe,EAACX,IAAI,CAAC,CAACY,KAAK,CAAC,UAACC,KAAK,EAAI;YACpDhB,KAAK,CAACiB,MAAM,CAACd,IAAI,CAAC;YAClB,MAAMa,KAAK;UACb,CAAC,CAAC;UAEFhB,KAAK,CAACkB,GAAG,CAACf,IAAI,EAAEC,OAAO,CAAC;UAAC,OAAAI,QAAA,CAAAI,MAAA,WAElBR,OAAO;QAAA;QAAA;UAAA,OAAAI,QAAA,CAAAW,IAAA;MAAA;IAAA,qBAAAC,OAAA;EAAA,CACf;AACH;AAjBAC,OAAA,CAAAtB,iBAAA,GAAAA,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}