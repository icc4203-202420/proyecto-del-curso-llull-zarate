{"ast":null,"code":"import { registerRootComponent } from 'expo';\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SplashScreen, _internal_preventAutoHideAsync } from \"./views/Splash\";\nfunction isBaseObject(obj) {\n  if (Object.prototype.toString.call(obj) !== '[object Object]') {\n    return false;\n  }\n  var proto = Object.getPrototypeOf(obj);\n  if (proto === null) {\n    return true;\n  }\n  return proto === Object.prototype;\n}\nfunction isErrorShaped(error) {\n  return error && typeof error === 'object' && typeof error.name === 'string' && typeof error.message === 'string';\n}\nfunction convertError(error) {\n  if (isErrorShaped(error)) {\n    return error;\n  }\n  if (process.env.NODE_ENV === 'development') {\n    if (error == null) {\n      return new Error('A null/undefined error was thrown.');\n    }\n  }\n  if (isBaseObject(error)) {\n    return new Error(JSON.stringify(error));\n  }\n  return new Error(String(error));\n}\nexport function renderRootComponent(Component) {\n  try {\n    setTimeout(function () {\n      _internal_preventAutoHideAsync();\n    });\n    if (process.env.NODE_ENV !== 'production') {\n      var _require = require('@expo/metro-runtime/error-overlay'),\n        withErrorOverlay = _require.withErrorOverlay;\n      registerRootComponent(withErrorOverlay(Component));\n    } else {\n      registerRootComponent(Component);\n    }\n  } catch (e) {\n    SplashScreen.hideAsync();\n    var error = convertError(e);\n    registerRootComponent(function () {\n      return React.createElement(View, null);\n    });\n    if (Platform.OS === 'web') {\n      console.error(error);\n      console.error(\"A runtime error has occurred while rendering the root component.\");\n    }\n    setTimeout(function () {\n      throw error;\n    });\n  }\n}","map":{"version":3,"names":["registerRootComponent","React","Platform","View","SplashScreen","_internal_preventAutoHideAsync","isBaseObject","obj","Object","prototype","toString","call","proto","getPrototypeOf","isErrorShaped","error","name","message","convertError","process","env","NODE_ENV","Error","JSON","stringify","String","renderRootComponent","Component","setTimeout","_require","require","withErrorOverlay","e","hideAsync","createElement","OS","console"],"sources":["/Users/diegollull/Desktop/Uandes/8vo_semestre/APPS/ proyecto-del-curso-llull-zarate /hybrid-frontend/node_modules/expo-router/src/renderRootComponent.tsx"],"sourcesContent":["import { registerRootComponent } from 'expo';\nimport React from 'react';\nimport { Platform, View } from 'react-native';\n\nimport { SplashScreen, _internal_preventAutoHideAsync } from './views/Splash';\n\nfunction isBaseObject(obj: any) {\n  if (Object.prototype.toString.call(obj) !== '[object Object]') {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(obj);\n  if (proto === null) {\n    return true;\n  }\n  return proto === Object.prototype;\n}\n\nfunction isErrorShaped(error: any): error is Error {\n  return (\n    error &&\n    typeof error === 'object' &&\n    typeof error.name === 'string' &&\n    typeof error.message === 'string'\n  );\n}\n\n/**\n * After we throw this error, any number of tools could handle it.\n * This check ensures the error is always in a reason state before surfacing it to the runtime.\n */\nfunction convertError(error: any) {\n  if (isErrorShaped(error)) {\n    return error;\n  }\n\n  if (process.env.NODE_ENV === 'development') {\n    if (error == null) {\n      return new Error('A null/undefined error was thrown.');\n    }\n  }\n\n  if (isBaseObject(error)) {\n    return new Error(JSON.stringify(error));\n  }\n\n  return new Error(String(error));\n}\n\n/**\n * Register and mount the root component using the predefined rendering\n * method. This function ensures the Splash Screen and errors are handled correctly.\n */\nexport function renderRootComponent(Component: React.ComponentType<any>) {\n  try {\n    // This must be delayed so the user has a chance to call it first.\n    setTimeout(() => {\n      _internal_preventAutoHideAsync();\n    });\n\n    if (process.env.NODE_ENV !== 'production') {\n      const { withErrorOverlay } =\n        require('@expo/metro-runtime/error-overlay') as typeof import('@expo/metro-runtime/error-overlay');\n      registerRootComponent(withErrorOverlay(Component));\n    } else {\n      registerRootComponent(Component);\n    }\n  } catch (e) {\n    // Hide the splash screen if there was an error so the user can see it.\n    SplashScreen.hideAsync();\n\n    const error = convertError(e);\n    // Prevent the app from throwing confusing:\n    //  ERROR  Invariant Violation: \"main\" has not been registered. This can happen if:\n    // * Metro (the local dev server) is run from the wrong folder. Check if Metro is running, stop it and restart it in the current project.\n    // * A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.\n    registerRootComponent(() => <View />);\n\n    // Console is pretty useless on native, on web you get interactive stack traces.\n    if (Platform.OS === 'web') {\n      console.error(error);\n      console.error(`A runtime error has occurred while rendering the root component.`);\n    }\n\n    // Give React a tick to render before throwing.\n    setTimeout(() => {\n      throw error;\n    });\n\n    // TODO: Render a production-only error screen.\n  }\n}\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,MAAM;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAAC,OAAAC,QAAA;AAAA,OAAAC,IAAA;AAG1B,SAASC,YAAY,EAAEC,8BAA8B;AAErD,SAASC,YAAYA,CAACC,GAAQ;EAC5B,IAAIC,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAACJ,GAAG,CAAC,KAAK,iBAAiB,EAAE;IAC7D,OAAO,KAAK;;EAEd,IAAMK,KAAK,GAAGJ,MAAM,CAACK,cAAc,CAACN,GAAG,CAAC;EACxC,IAAIK,KAAK,KAAK,IAAI,EAAE;IAClB,OAAO,IAAI;;EAEb,OAAOA,KAAK,KAAKJ,MAAM,CAACC,SAAS;AACnC;AAEA,SAASK,aAAaA,CAACC,KAAU;EAC/B,OACEA,KAAK,IACL,OAAOA,KAAK,KAAK,QAAQ,IACzB,OAAOA,KAAK,CAACC,IAAI,KAAK,QAAQ,IAC9B,OAAOD,KAAK,CAACE,OAAO,KAAK,QAAQ;AAErC;AAMA,SAASC,YAAYA,CAACH,KAAU;EAC9B,IAAID,aAAa,CAACC,KAAK,CAAC,EAAE;IACxB,OAAOA,KAAK;;EAGd,IAAII,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC1C,IAAIN,KAAK,IAAI,IAAI,EAAE;MACjB,OAAO,IAAIO,KAAK,CAAC,oCAAoC,CAAC;;;EAI1D,IAAIhB,YAAY,CAACS,KAAK,CAAC,EAAE;IACvB,OAAO,IAAIO,KAAK,CAACC,IAAI,CAACC,SAAS,CAACT,KAAK,CAAC,CAAC;;EAGzC,OAAO,IAAIO,KAAK,CAACG,MAAM,CAACV,KAAK,CAAC,CAAC;AACjC;AAMA,OAAM,SAAUW,mBAAmBA,CAACC,SAAmC;EACrE,IAAI;IAEFC,UAAU,CAAC,YAAK;MACdvB,8BAA8B,EAAE;IAClC,CAAC,CAAC;IAEF,IAAIc,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,IAAAQ,QAAA,GACEC,OAAO,CAAC,mCAAmC,CAAuD;QAD5FC,gBAAgB,GAAAF,QAAA,CAAhBE,gBAAgB;MAExB/B,qBAAqB,CAAC+B,gBAAgB,CAACJ,SAAS,CAAC,CAAC;KACnD,MAAM;MACL3B,qBAAqB,CAAC2B,SAAS,CAAC;;GAEnC,CAAC,OAAOK,CAAC,EAAE;IAEV5B,YAAY,CAAC6B,SAAS,EAAE;IAExB,IAAMlB,KAAK,GAAGG,YAAY,CAACc,CAAC,CAAC;IAK7BhC,qBAAqB,CAAC;MAAA,OAAMC,KAAA,CAAAiC,aAAA,CAAC/B,IAAI,OAAG;IAAA,EAAC;IAGrC,IAAID,QAAQ,CAACiC,EAAE,KAAK,KAAK,EAAE;MACzBC,OAAO,CAACrB,KAAK,CAACA,KAAK,CAAC;MACpBqB,OAAO,CAACrB,KAAK,mEAAmE,CAAC;;IAInFa,UAAU,CAAC,YAAK;MACd,MAAMb,KAAK;IACb,CAAC,CAAC;;AAIN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}